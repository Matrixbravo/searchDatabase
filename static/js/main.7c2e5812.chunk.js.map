{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","name","setName","users","setUsers","onSubmitForm","e","preventDefault","fetch","response","json","parseResponse","console","error","message","className","onSubmit","type","placeholder","value","onChange","target","map","user","key","user_id","first_name","last_name","email","gender","ip_address","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":";4hNA8DeA,MA3Df,WACE,MAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA0BF,mBAAS,IAAnC,mBAAOG,EAAP,KAAcC,EAAd,KAEMC,EAAY,uCAAG,WAAMC,GAAN,gFACnBA,EAAEC,iBADiB,kBAGMC,MAAM,qCAAD,OAAsCP,IAHjD,cAGXQ,EAHW,gBAKWA,EAASC,OALpB,OAKXC,EALW,OAOjBP,EAASO,GAPQ,kDASjBC,QAAQC,MAAM,KAAIC,SATD,0DAAH,sDAYlB,OACE,kBAAC,WAAD,KACE,yBAAKC,UAAU,yBACb,wBAAIA,UAAU,QAAd,eACA,0BAAMA,UAAU,SAASC,SAAUX,GACjC,2BACEY,KAAK,OACLhB,KAAK,OACLiB,YAAY,iBACZH,UAAU,eACVI,MAAOlB,EACPmB,SAAU,SAAAd,GAAC,OAAIJ,EAAQI,EAAEe,OAAOF,UAElC,4BAAQJ,UAAU,mBAAlB,WAEF,2BAAOA,UAAU,cACf,+BACE,4BACE,0CACA,yCACA,qCACA,sCACA,4CAGJ,+BACGZ,EAAMmB,KAAI,SAAAC,GAAI,OACb,wBAAIC,IAAKD,EAAKE,SACZ,4BAAKF,EAAKG,YACV,4BAAKH,EAAKI,WACV,4BAAKJ,EAAKK,OACV,4BAAKL,EAAKM,QACV,4BAAKN,EAAKO,kBAKA,IAAjB3B,EAAM4B,QAAgB,kDC5CXC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAnC,GACLD,QAAQC,MAAMA,EAAMC,c","file":"static/js/main.7c2e5812.chunk.js","sourcesContent":["import React, { Fragment, useState } from \"react\";\nimport \"./App.css\";\n\nfunction App() {\n  const [name, setName] = useState(\"\");\n  const [users, setUsers] = useState([]);\n\n  const onSubmitForm = async e => {\n    e.preventDefault();\n    try {\n      const response = await fetch(`http://localhost:5000/users/?name=${name}`);\n\n      const parseResponse = await response.json();\n\n      setUsers(parseResponse);\n    } catch (err) {\n      console.error(err.message);\n    }\n  };\n  return (\n    <Fragment>\n      <div className=\"container text-center\">\n        <h1 className=\"my-5\">Search List</h1>\n        <form className=\"d-flex\" onSubmit={onSubmitForm}>\n          <input\n            type=\"text\"\n            name=\"name\"\n            placeholder=\"Enter user ...\"\n            className=\"form-control\"\n            value={name}\n            onChange={e => setName(e.target.value)}\n          />\n          <button className=\"btn btn-success\">Submit</button>\n        </form>\n        <table className=\"table my-5\">\n          <thead>\n            <tr>\n              <th>First Name</th>\n              <th>Last Name</th>\n              <th>Email</th>\n              <th>Gender</th>\n              <th>ip_address</th>\n            </tr>\n          </thead>\n          <tbody>\n            {users.map(user => (\n              <tr key={user.user_id}>\n                <td>{user.first_name}</td>\n                <td>{user.last_name}</td>\n                <td>{user.email}</td>\n                <td>{user.gender}</td>\n                <td>{user.ip_address}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n        {users.length === 0 && <p>No Results Found</p>}\n      </div>\n    </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}